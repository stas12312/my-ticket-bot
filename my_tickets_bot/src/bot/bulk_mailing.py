"""–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
import logging

import aiogram
import asyncpg
from aiogram.exceptions import TelegramForbiddenError

from bot.services.events.messages import make_event_message, send_event_card
from bot.utils import safe_send_message
from services.repositories import Repo

EVENTS_MAILING_TITLE = 'üîî _–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏_ üîî\n'
NEXT_DAY_MAILING_TITLE = 'üîî _–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö_ üîî\n'

logger = logging.getLogger(__name__)


async def coming_events_mailing(
        bot: aiogram.Bot,
        event_ids: list[int],
        connection: asyncpg.Connection
):
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    repo = Repo(connection)
    events = await repo.event.list(event_ids=event_ids)

    for event in events:
        logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id=%s event_id=%s', event.user.user_id, event.event_id)
        try:
            await send_event_card(bot, event.user.user_id, event.event_id, repo, EVENTS_MAILING_TITLE)
        except TelegramForbiddenError:
            logger.info('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è user_id=%s', event.user.user_id)


async def next_day_events_mailing(
        bot: aiogram.Bot,
        events_by_user: dict[int, list[int]],
        connection: asyncpg.Connection,
):
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"""
    repo = Repo(connection)

    for user_id, event_ids in events_by_user.items():
        events = await repo.event.list(event_ids=event_ids)
        events_msg = '\n\n'.join([make_event_message(e, with_command=True) for e in events])
        msg = f'{NEXT_DAY_MAILING_TITLE}\n{events_msg}'
        await safe_send_message(bot, user_id, msg, disable_web_page_preview=True)
