"""–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

from aiogram.utils.markdown import bold, italic, link
from aiogram.utils.text_decorations import markdown_decoration

from models import Location, City
from services.statistic import RowStatistic


def quote(
        value: str
) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    return markdown_decoration.quote(value)


TIME_EXAMPLES = f'–ü—Ä–∏–º–µ—Ä—ã:\n' \
                f'_{quote("20.03.23 20:00")}_\n' \
                f'_{quote("20.03 19:00")}_\n' \
                f'_{quote("20 –º–∞—Ä—Ç–∞ 21:30")}_'


def get_full_address_message(
        location: Location,
) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞"""
    address = f'{quote(location.city.name)}, {quote(location.address)}'
    return f'{bold(location.name)} {italic(address)}'


def get_address(
        location: Location,
) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    return f'{quote(location.city.name)}, {quote(location.address)}'


def make_city_message(
        city: City,
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    rows = [
        f'üèò _{quote(city.name)}_\n',
        f'üï∞ {quote(city.timezone)}',
    ]
    return _make_message_by_rows(rows)


def make_location_message(
        location: Location,
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏"""

    url_name = link(location.name, location.url)

    rows = [
        f'üèõ _{url_name}_\n',
        f'üìç {quote(location.city.name)}, {quote(location.address)}',
    ]
    return _make_message_by_rows(rows)


def _make_message_by_rows(
        rows: list[str],
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫"""
    return '\n'.join(rows)


def get_message_for_statistic(
        statistic: list[RowStatistic],
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total_count = 0
    rows = ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π üìä']
    for row in statistic:
        rows.append(f'\n{bold(row.year)}')
        if row.past_count:
            rows.append(f'–ü—Ä–æ—à–µ–¥—à–∏–µ: {row.past_count}')
        if row.planned_count:
            rows.append(f'–ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è: {row.planned_count}')
        total_count += row.planned_count + row.past_count

    return '\n'.join(rows)
